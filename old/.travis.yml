# Based on the "trust" template v0.1.1
# https://github.com/japaric/trust/tree/v0.1.1

dist: trusty
language: rust
services: docker
sudo: required

# TODO Rust builds on stable by default, this can be
# overridden on a case by case basis down below.

env:
  global:
    # TODO Update this to match the name of your project.
    - CRATE_NAME=badge-cache

matrix:
  # TODO These are all the build jobs. Adjust as necessary. Comment out what you
  # don't need
  include:
    # Linux
    - env: TARGET=i686-unknown-linux-gnu
    #- env: TARGET=i686-unknown-linux-musl
    - env: TARGET=x86_64-unknown-linux-gnu
    - env: TARGET=x86_64-unknown-linux-musl

    # OSX
    #- env: TARGET=i686-apple-darwin
    #  os: osx
    #- env: TARGET=x86_64-apple-darwin
    #  os: osx

    ## *BSD
    #- env: TARGET=i686-unknown-freebsd DISABLE_TESTS=1
    #- env: TARGET=x86_64-unknown-freebsd DISABLE_TESTS=1
    #- env: TARGET=x86_64-unknown-netbsd DISABLE_TESTS=1

    ## Other architectures
    #- env: TARGET=aarch64-unknown-linux-gnu
    #- env: TARGET=armv7-unknown-linux-gnueabihf
    #- env: TARGET=mips-unknown-linux-gnu
    #- env: TARGET=mips64-unknown-linux-gnuabi64
    #- env: TARGET=mips64el-unknown-linux-gnuabi64
    #- env: TARGET=mipsel-unknown-linux-gnu
    #- env: TARGET=powerpc-unknown-linux-gnu
    #- env: TARGET=powerpc64-unknown-linux-gnu
    #- env: TARGET=powerpc64le-unknown-linux-gnu
    #- env: TARGET=s390x-unknown-linux-gnu DISABLE_TESTS=1

    ## Testing other channels
    #- env: TARGET=x86_64-unknown-linux-gnu
    #  rust: nightly
    #- env: TARGET=x86_64-apple-darwin
    #  os: osx
    #  rust: nightly

before_install: set -e

install:
  - sh ci/install.sh
  - source ~/.cargo/env || true

script:
  - bash ci/script.sh

after_script: set +e

before_deploy:
  - sh ci/before_deploy.sh

deploy:
  api_key:
    secure: VIseqm2yPqrWIbnIQCjWC5DhN7uxUOQikiF1jOt45DnugzUQiVrKuIVt79WHVFXVnbig0+a8p2IOan8BCuSeVlx667R8nT8oki1fMOH6CpstYtsaMxFkra63mJd516lpMR067SrRV98cad6Fsnpx91GACDjzOz/zTMBhgT9BPgy66s1lo5AbYh2f3QgeToAcPyQcvMLbTo66kQHEBIudiUIbhny4TBbGepByVpuyCYCpUuNzzsgE6x/pjtgDpiaqxJWl7AjB9/sIA6Pl9dcQ95yi/rkZV05mWBBjCDiIr15wmMtNSrcQrKEobG6LAGl3x5MigNPtkUq2CNLoWbEpE8TIXfaS1ZKoEb7kdcHqFMupeCYd6Tb/2tOjE24PWyeAx65wTNU3+VD4fv2hUwCCpBoMhttxP7vsuO6pvaxe4GIVSarYo+cVbW1RVhipKmGnrI7XF9ITC8ZoPTZ2BKAR5yy9kvMenwtdkJUTCxts31NzSK5cSsYKPtiFsohe2cDW6zoVtav+i8O5qtj3u7HUftV5F81m/bb85iPe98Q7MS5wbe5iMdbCgeIse3bP1Q2ZCxguBHMbxKbX+XO5D2Docxx+v9qiGuD4w3eXxvwBZwjlypy4NtnAvywGYkV5E/nbZZ3UaPqw+bm4f85w2kxPl6ZIZs6xKo7nA1/cVbTUPnU=
  file_glob: true
  file: $CRATE_NAME-$TRAVIS_TAG-$TARGET.*
  on:
    # TODO Here you can pick which targets will generate binary releases
    # In this example, there are some targets that are tested using the stable
    # and nightly channels. This condition makes sure there is only one release
    # for such targets and that's generated using the stable channel
    condition: $TRAVIS_RUST_VERSION = stable
    tags: true
  provider: releases
  skip_cleanup: true

cache: cargo
before_cache:
  # Travis can't cache files that are not readable by "others"
  - chmod -R a+r $HOME/.cargo

branches:
  only:
    # release tags
    - /^v\d+\.\d+\.\d+.*$/
    - master

notifications:
  email:
    on_success: never
